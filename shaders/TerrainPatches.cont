#version 400

layout(vertices = 4) out; // a patch has 4 verticies

// program Uniforms
uniform vec3 eyePos;
uniform bool removeCracking;

vec3 getPatchAvgPos()
{
    vec3 patch_avg_pos = (gl_in[0].gl_Position.xyz + 
                            gl_in[1].gl_Position.xyz + 
                            gl_in[2].gl_Position.xyz + 
                            gl_in[3].gl_Position.xyz) * 0.25;
    return patch_avg_pos;
}


int getLevel(float dist)
{
    
    //float low_Level = 30.0, high_level = 100.0;
    float low_Level = 1.0, high_level = 10.0;
    float min_dist = 0.0;
    float max_dist = 200;   //abs(distance(vec3(-45.0, 0.0, -90.0), vec3(180.0, 0.0, 135.0)));

    int level = int(((dist - min_dist) / (max_dist - min_dist)) * (low_Level - high_level) + high_level);

    if (level < int(low_Level)) level = int(low_Level);
    if (level > int(high_level)) level = int(high_level);

    return level;
}

int getOuterLevel(int x1, int x2)
{
    vec3 patch_avg_pos = (gl_in[x1].gl_Position.xyz + 
                            gl_in[x2].gl_Position.xyz) * 0.5;

    float dist = abs(distance(eyePos, patch_avg_pos));

    return getLevel(dist);

    
}


void main()
{
    int level, out_level_0, out_level_1, out_level_2, out_level_3;
    
    float dist = abs(distance(eyePos, getPatchAvgPos())); // The distance d between the camera and the centre of the patch

    level = getLevel(dist);

    

    if (removeCracking) {
        
        out_level_0 = getOuterLevel(0, 3);
        out_level_1 = getOuterLevel(0, 1);
        out_level_2 = getOuterLevel(1, 2);
        out_level_3 = getOuterLevel(2, 3);
    } else {
        
        out_level_0 = level;
        out_level_1 = level;
        out_level_2 = level;
        out_level_3 = level;
    }


    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    gl_TessLevelOuter[0] = out_level_0;
    gl_TessLevelOuter[1] = out_level_1;
    gl_TessLevelOuter[2] = out_level_2;
    gl_TessLevelOuter[3] = out_level_3;
    gl_TessLevelInner[0] = level;
    gl_TessLevelInner[1] = level;
}